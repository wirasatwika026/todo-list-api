# Docker Configuration menggunakan Environment Variables

# Database Configuration - Dari Environment Variables
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:5432/todolist}
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD}

# JPA Configuration - Production-like
spring.jpa.hibernate.ddl-auto=${JPA_DDL_AUTO:validate}
spring.jpa.show-sql=${JPA_SHOW_SQL:false}
spring.jpa.properties.hibernate.format_sql=${JPA_FORMAT_SQL:false}

# Flyway Configuration
spring.flyway.enabled=${FLYWAY_ENABLED:true}

# JWT Configuration - Dari Environment Variables
app.jwt.secret=${JWT_SECRET}
app.jwt.expiration=${JWT_EXPIRATION:86400000}

# Logging Configuration - Production-like
logging.level.com.example.todo_list_api=${LOG_LEVEL:INFO}
logging.level.org.springframework.security=${SECURITY_LOG_LEVEL:WARN}
logging.level.root=${ROOT_LOG_LEVEL:WARN}

# Server Configuration
server.port=${SERVER_PORT:8080}

# âœ… Reverse Proxy Configuration
server.forward-headers-strategy=framework
server.tomcat.remoteip.remote-ip-header=x-forwarded-for
server.tomcat.remoteip.protocol-header=x-forwarded-proto
server.tomcat.remoteip.protocol-header-https-value=https
server.tomcat.remoteip.host-header=x-forwarded-host
server.tomcat.remoteip.port-header=x-forwarded-port

# Production optimizations
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true